{
  "Features": {
    "Bitness": 64,
    "EnabledHostFeatures": [
      "FLAGM",
      "FLAGM2"
    ],
    "DisabledHostFeatures": [
      "SVE128",
      "SVE256",
      "AFP"
    ]
  },
  "Instructions": {
    "The Witcher 3": {
      "ExpectedInstructionCount": 11,
      "x86Insts": [
        "mov eax, 0x1",
        "lock xadd qword [rcx], rax",
        "mov rdx, rax",
        "and edx, 0x1f",
        "inc rdx",
        "shl rdx, 0x6",
        "add rdx, rcx"
      ],
      "ExpectedArm64ASM": [
        "mov w4, #0x1",
        "ldaddal x4, x4, [x5]",
        "mov x6, x4",
        "and w6, w4, #0x1f",
        "add x6, x6, #0x1 (1)",
        "lsl x20, x6, #6",
        "mov x6, x20",
        "add x6, x20, x5",
        "eor w27, w20, w5",
        "mov x26, x6",
        "cmn x20, x5"
      ]
    },
    "FMOD scalar loop": {
      "ExpectedInstructionCount": 90,
      "x86Insts": [
        "mov     esi, ecx",
        "mov     rdx, rbp",
        "mov     rax, rbx",
        "movss   xmm2, dword [rdx]",
        "add     rax, 0x20",
        "mulss   xmm2, xmm0",
        "add     rdx, 0x20",
        "addss   xmm2, dword [rax-0x20]",
        "movss   dword [rax-0x20], xmm2",
        "movss   xmm2, dword [rdx-0x1c]",
        "mulss   xmm2, xmm1",
        "addss   xmm2, dword [rax-0x1c]",
        "movss   dword [rax-0x1c], xmm2",
        "movss   xmm2, dword [rdx-0x18]",
        "mulss   xmm2, xmm0",
        "addss   xmm2, dword [rax-0x18]",
        "movss   dword [rax-0x18], xmm2",
        "movss   xmm2, dword [rdx-0x14]",
        "mulss   xmm2, xmm1",
        "addss   xmm2, dword [rax-0x14]",
        "movss   dword [rax-0x14], xmm2",
        "movss   xmm2, dword [rdx-0x10]",
        "mulss   xmm2, xmm0",
        "addss   xmm2, dword [rax-0x10]",
        "movss   dword [rax-0x10], xmm2",
        "movss   xmm2, dword [rdx-0xc]",
        "mulss   xmm2, xmm1",
        "addss   xmm2, dword [rax-0xc]",
        "movss   dword [rax-0xc], xmm2",
        "movss   xmm2, dword [rdx-0x8]",
        "mulss   xmm2, xmm0",
        "addss   xmm2, dword [rax-0x8]",
        "movss   dword [rax-0x8], xmm2",
        "movss   xmm2, dword [rdx-0x4]",
        "mulss   xmm2, xmm1",
        "addss   xmm2, dword [rax-0x4]",
        "movss   dword [rax-0x4], xmm2",
        "sub     esi, 0x1"
      ],
      "ExpectedArm64ASM": [
        "mov w20, w5",
        "mov x10, x20",
        "mov x6, x9",
        "mov x4, x7",
        "ldr s18, [x6]",
        "add x4, x4, #0x20 (32)",
        "fmul s0, s18, s16",
        "mov v18.s[0], v0.s[0]",
        "add x6, x6, #0x20 (32)",
        "sub x21, x4, #0x20 (32)",
        "ldr s2, [x21]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x20 (32)",
        "str s18, [x21]",
        "sub x21, x6, #0x1c (28)",
        "ldr s18, [x21]",
        "fmul s0, s18, s17",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x1c (28)",
        "ldr s2, [x21]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x1c (28)",
        "str s18, [x21]",
        "sub x21, x6, #0x18 (24)",
        "ldr s18, [x21]",
        "fmul s0, s18, s16",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x18 (24)",
        "ldr s2, [x21]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x18 (24)",
        "str s18, [x21]",
        "sub x21, x6, #0x14 (20)",
        "ldr s18, [x21]",
        "fmul s0, s18, s17",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x14 (20)",
        "ldr s2, [x21]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x14 (20)",
        "str s18, [x21]",
        "sub x21, x6, #0x10 (16)",
        "ldr s18, [x21]",
        "fmul s0, s18, s16",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x10 (16)",
        "ldr s2, [x21]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x10 (16)",
        "str s18, [x21]",
        "sub x21, x6, #0xc (12)",
        "ldr s18, [x21]",
        "fmul s0, s18, s17",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0xc (12)",
        "ldr s2, [x21]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0xc (12)",
        "str s18, [x21]",
        "sub x21, x6, #0x8 (8)",
        "ldr s18, [x21]",
        "fmul s0, s18, s16",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x8 (8)",
        "ldr s2, [x21]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x8 (8)",
        "str s18, [x21]",
        "sub x21, x6, #0x4 (4)",
        "ldr s18, [x21]",
        "fmul s0, s18, s17",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x4 (4)",
        "ldr s2, [x21]",
        "fadd s0, s18, s2",
        "mov v18.s[0], v0.s[0]",
        "sub x21, x4, #0x4 (4)",
        "str s18, [x21]",
        "sub w10, w20, #0x1 (1)",
        "mov x27, x20",
        "mov x26, x10",
        "cmp w20, #0x1 (1)",
        "cfinv"
      ]
    },
    "Scalar vector add loop": {
      "ExpectedInstructionCount": 10,
      "Comment": [
        "Saw this in bytemark"
      ],
      "x86Insts": [
        "movdqu  xmm0, [r12+rax]",
        "paddq   xmm0, xmm1",
        "movups  [r12+rax], xmm0",
        "add     rax, 0x10",
        "cmp     rsi, rax"
      ],
      "ExpectedArm64ASM": [
        "add x20, x16, x4",
        "ldr q16, [x20]",
        "add v16.2d, v16.2d, v17.2d",
        "add x20, x16, x4",
        "str q16, [x20]",
        "add x4, x4, #0x10 (16)",
        "sub x26, x10, x4",
        "eor w27, w10, w4",
        "cmp x10, x4",
        "cfinv"
      ]
    },
    "bytemark data xor loop": {
      "ExpectedInstructionCount": 17,
      "Comment": [
        "Saw this in bytemark"
      ],
      "x86Insts": [
        "mov     rdx, rax",
        "mov     rcx, rax",
        "mov     r14, rsi",
        "add     rax, 0x1",
        "shr     rdx, 0x6",
        "and     ecx, 0x3f",
        "shl     r14, cl",
        "xor     qword [rbx+rdx*8], r14",
        "cmp     rdi, rax"
      ],
      "ExpectedArm64ASM": [
        "mov x20, x4",
        "mov x6, x20",
        "mov x5, x20",
        "mov x19, x10",
        "add x4, x20, #0x1 (1)",
        "lsr x6, x20, #6",
        "and w5, w20, #0x3f",
        "lsl x19, x19, x5",
        "add x20, x7, x6, lsl #3",
        "ldr x20, [x20]",
        "eor x20, x20, x19",
        "add x21, x7, x6, lsl #3",
        "str x20, [x21]",
        "sub x26, x11, x4",
        "eor w27, w11, w4",
        "cmp x11, x4",
        "cfinv"
      ]
    }
  }
}
